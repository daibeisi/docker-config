# 定义Nginx运行的用户和用户组
user nginx;

# nginx进程数，建议设置为等于CPU总核心数。
worker_processes auto;

# CPU亲和机制则是指将每个Nginx的工作进程，绑定在固定的CPU核心上，从而减小CPU切换带来的时间开销和资源损耗
worker_cpu_affinity auto;

# 一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，
# 但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。
worker_rlimit_nofile 65535;

# 全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]
error_log /var/log/nginx/error.log info;

# 进程文件
pid /var/run/nginx.pid;

events {
    accept_mutex on;  # 设置网路连接序列化，防止惊群现象发生，默认为on
    multi_accept on;  # 设置一个进程是否同时接受多个网络连接，默认为off
    # 参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ];
    # epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。
    use epoll;
    # 单个进程最大连接数（最大连接数=连接数*进程数）
    worker_connections  65535;
}

# 设定http服务器
http {
    include       mime.types;  # 文件扩展名与文件类型映射表
    default_type  application/octet-stream;  #默认文件类型

    charset utf-8; #默认编码
    
    # access_log off; #取消服务日志
    #nginx访问日志放在logs/host.access.log下，并且使用main格式（还可以自定义格式）
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  main;


    # 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，
    # 如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。
    # 注意：如果图片显示不正常把这个改成off。
    sendfile        on;
    # sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。
    tcp_nopush      on; #设置数据包会累积一下再一起传输，可以提高一些传输效率。 tcp_nopush 必须和 sendfile 搭配使用。
    tcp_nodelay     on; #小的数据包不等待直接传输。默认为 on。看上去是和 tcp_nopush 相反的功能，但是两边都为 on 时 nginx 也可以平衡这两个功能的使用。

    autoindex       off; #开启目录列表访问，合适下载服务器，默认关闭。
    autoindex_exact_size on; #默认为on，显示出文件的确切大小，单位是bytes。改为off后，显示出文件的大概大小，单位是kB或者MB或者GB。
    autoindex_localtime off;  #默认为off，显示的文件时间为GMT时间。改为on后，显示的文件时间为文件的服务器时间。

    # 长连接超时时间，单位是秒。 长连接超时时间，单位是秒，这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置，
    # 长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，超时时间内没上传完成会导致失败。
    # 如果设置时间过长，用户又多，长时间保持连接会占用大量资源。
    keepalive_timeout 300;

    server_names_hash_bucket_size 128; #服务器名字的hash表大小

    client_header_buffer_size 1k; #用来指定来自客户端请求头的header buffer 大小。对于大多数请求，1K的缓存已经足够了，如果自定义了消息头或有更大的cookie，可以增大缓存区大小。
    large_client_header_buffers 4 64k; #用来指定客户端请求中较大的消息头的缓存最大数量和大小，4为个数，128k为大小，最大缓存为4个128KB。
    client_max_body_size 25m; #允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值。
    client_header_timeout 60; #读取http头部的超时时间，单位秒，连接建立后，服务端接收http头部，规定时间内没收到，则超时，返回给客服端408（request time out）
    client_body_timeout 60s; #读取http body的超时时间，单位秒，连接建立后，服务端接收body，规定时间内没收到，则超时，返回给客服端408（request time out）
    send_timeout 60s; #发送响应超时时间，单位秒，服务端向客户端发送数据包，规定时间内客户端没收到，则超时

    proxy_connect_timeout 10; #设置与后端服务器建立连接时的超时时间。
    proxy_read_timeout 120; #设置从后端服务器读取响应数据的超时时间。
    proxy_send_timeout 10; #设置向后端服务器传输请求数据的超时时间。
    proxy_buffering on; #是否启用缓冲机制，默认为on关闭状态。
    client_body_buffer_size 512k; #设置缓冲客户端请求数据的内存大小
    proxy_buffers 4 64k; #为每个请求/连接设置缓冲区的数量和大小，默认4 4k/8k
    proxy_buffer_size 16k; #设置用于存储响应头的缓冲区大小
    proxy_busy_buffers_size 128k; #在后端数据没有完全接收完成时，Nginx可以将busy状态的缓冲返回给客户端，该参数用来设置busy状态的buffer具体有多大，默认为proxy_buffer_size*2。
    proxy_temp_file_write_size 128k; #设置每次写数据到临时文件的大小限制。
    proxy_temp_path /etc/nginx/temp_buffer; #当内存缓冲区存满时，可以将数据临时存放到磁盘，该参数是设置存储缓冲数据的目录。

    #gzip模块设置
    gzip on; #开启gzip压缩输出
    gzip_types text/plain application/x-javascript text/css application/xml; #压缩类型，默认就已经包含text/html，写上去也不会有问题，但是会有一个warn。
    gzip_comp_level 5;  # 压缩等级
    gzip_vary on;  # 在头部中添加Vary: Accept-Encoding（建议开启）
    gzip_min_length 2k; #最小压缩文件大小
    gzip_buffers 16 8k; #压缩缓冲区
    gzip_http_version 1.1; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）
    gzip_disable "MSIE [1-6]\."; #对于不支持压缩功能的客户端请求不开启压缩机制，低版本的IE浏览器不支持压缩
    gzip_proxied off;  # 关闭对后端服务器的响应结果进行压缩

    # ngx_http_limit_req_module模块用于限制每个定义键的请求处理速率，特别是来自单个 IP 地址的请求的处理速率。限制是使用“漏桶”方法完成的。
    limit_req_zone $binary_remote_addr zone=one:10m rate=5r/s;

    include /etc/nginx/conf.d/*.conf;
}
